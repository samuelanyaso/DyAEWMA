WD2 <- "C:/Users/Chijioke/OneDrive/Desktop/DyAEWMA"
setwd(WD2)
dir()
setwd(WD2)
formatR::tidy_dir("R")      # makes the code neat
# Step - Generate R documentation
devtools::document() ## default argument is pkg = ".", current working directory
usethis::use_rcpp()               # initialize the rcpp
# then run next lines of code
Rcpp::compileAttributes()
devtools::load_all()
devtools::document()      # generate documentation
browseVignettes()
setwd(WD2)
usethis::use_vignette("DyAEWMA")
# Checks the package
setwd(WD2)
devtools::check() ## default argument is pkg = ".", current working directory
#  Builds the package
# This step will generate a .tar.gz package (a zip file)
setwd(WD2)
devtools::build() ## default argument is pkg = ".", current working directory
# Install the package
# To install package, set wd in the home directory of the
# Built package
setwd(WD2)
devtools::install(build_vignettes = TRUE) ## also build the vignettes
devtools::install(build_vignettes = TRUE) ## also build the vignettes
library("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
# Install the package
# To install package, set wd in the home directory of the
# Built package
setwd(WD2)
devtools::install(build_vignettes = TRUE) ## also build the vignettes
# Checks the package
setwd(WD2)
devtools::check() ## default argument is pkg = ".", current working directory
#  Builds the package
# This step will generate a .tar.gz package (a zip file)
setwd(WD2)
devtools::build() ## default argument is pkg = ".", current working directory
# Install the package
# To install package, set wd in the home directory of the
# Built package
setwd(WD2)
devtools::install(build_vignettes = TRUE) ## also build the vignettes
library(DyAEWMA)
?arl_aewma
library(DyAEWMA)
arl_aewma(0.025,50,100)
ats_arl_aewma(0.025,50,100,0,2.5,3.1,0.05)
ats_arl_aewma(0.025,50,100,0,2.5,3.1,0.05)
ats_arl_aewma(0.025,50,100,0,2.5,3.1,0.05)
ats_arl_aewma(0.025,50,100,0,2.5,3.1,0.05)
ats_arl_aewma(0.025,50,100,0,2.5,3.1,0.05)
ats_arl_aewma(0.025,50,100,0,2.5,3.1,0.05)
ats_arl_aewma(0.025,50,100,0,2.5,3.1,0.05)
ats_arl_aewma(0.025,50,100,0,2.5,3.1,0.05)
arl_aewma(0.025,50,100)
arl_aewma(0.025,50,100)
arl_aewma(0.025,50,100)
arl_aewma(0.025,50,100)
arl_aewma(0.025,50,100)
arl_aewma(0.025,50,100)
arl_aewma(0.025,50,100)
arl_aewma(0.025,50,100)
arl_aewma(0.025,50,100)
arl_aewma(0.025,50,100)
arl_aewma(0.025,50,100)
arl_aewma(0.025,50,100)
pVal(c(0.25,-0.36,-0.54,0.89), 0.64)
pVal(c(0.25,-0.36,-0.54,0.89), 0.64)
pVal(c(0.25,-0.36,-0.54,0.89), 0.64)
pVal(c(0.25,-0.36,-0.54,0.89), 0.64)
pVal(c(0.25,-0.36,-0.54,0.89), 0.64)
pVal(c(0.25,-0.36,-0.54,0.89), 0.64)
pVal(c(0.25,-0.36,-0.54,0.89), 0.64)
pVal(c(0.25,-0.36,-0.54,0.89), 0.64)
length(empr_aewma(rnorm(100),1000, 50)
)
length(empr_aewma(rnorm(100),900, 50)
)
arl_aewma(0.025,50,100)
library(purrr)
library(doParallel)
library(foreach)
library(feather)
# Set up parallel backend to use many processors
cores = detectCores()
cl = makeCluster(cores - 1)
registerDoParallel(cl)
#########################################################
# Function for theta
tht = function(dtt){
if((dtt>0)&(dtt<=0.25)){
return(0.015)
}else if((dtt>0.25)&(dtt<=0.75)){
return(0.10)
}else if((dtt>0.75)&(dtt<=1.00)){
return(0.20)
}else if((dtt>1.00)&(dtt<=1.50)){
return(0.25)
}else if((dtt>1.50)&(dtt<=2.50)){
return(0.50)
}else if((dtt>2.50)&(dtt<=3.50)){
return(0.80)
}else if((dtt>3.50)){
return(1.00)
}
}
# Parameter Values
h = 0.5762
omg = 0.10
del0 = c(0,1.35,2.18,3.00)
del0 <- c(0, 1.50)
itr = 100000
ARL <- SD <- as.numeric()
for(j in seq_along(del0)){
del = del0[j]
RL =
foreach(i = 1:itr, .combine="c") %dopar% {
detHatSt_OLD = 0.0; W_OLD = 0; t = 1
while(t >= 1){
x = rnorm(1,del,1)
detHatSt_NEW = omg*x + (1 - omg)*detHatSt_OLD;
detHatStSt = detHatSt_NEW/(1 - (1 - omg)^t)
detTil = abs(detHatStSt)
W_NEW = tht(detTil)*x + (1-tht(detTil))*W_OLD
if(abs(W_NEW) > h){
break
}else{
t = t + 1
detHatSt_OLD=detHatSt_NEW
W_OLD=W_NEW
}
}
print(t)
}
ARL[j] <- mean(RL)
SD[j] <- sd(RL)
}
print(ARL)
print(SD)
rm(list=ls())
y <- c(1.63,1.01,0.73,0.55,0.41,0.01,0.06,0.02)
x <- c(2,4,6,8,10,24,28,32)
mod <- lm(log(y) ~ x)
summary(mod)
k <- -as.numeric(mod$coefficients[2])
D <- 30
V <- exp(log(D) - as.numeric(mod$coefficients[1]))
n <- length(y)
sig2hat <- sum(mod$residuals^2)/(n-2)
sig2hat <- sum(mod$residuals^2)/n
sum((log(y) - log(D*exp(-k*x)/V))^2)/length(y)
exp(-(sum(log(y)) - n*log(D) + k*sum(x))/length(y))
vcov(mod)
(sig2hat*sum(x^2))/(n*sum(x^2) - sum(x)^2)
(sig2hat*n)/(n*sum(x^2) - sum(x)^2)
# Variance of k
(sig2hat*n)/(n*sum(x^2) - sum(x)^2)
k_Var <- (sig2hat*n^2*V^2)/(n*(n* V^2 * sum(x^2) - (V*sum(x))^2))
# Variance of V
beta0 <- as.numeric(mod$coefficients[1])
beta1 <- as.numeric(mod$coefficients[2])
(sig2hat * exp(2*(log(D) - beta0)) * sum(x^2))/(n*sum(x^2) - sum(x)^2)
V_Var <- (n* V^4 * sig2hat * sum(x^2))/(n*(n* V^2 * sum(x^2) - (V*sum(x))^2))
# Confidence Intervals
V + 1.96*sqrt(V_Var)
V - 1.96*sqrt(V_Var)
k + 1.96*sqrt(k_Var)
k - 1.96*sqrt(k_Var)
# part C
x_half <- log(2)/k
x_half_var <- (sig2hat* (log(2)/k^2)^2 * n)/(n*sum(x^2) - sum(x)^2)
x_half + 1.96*sqrt(x_half_var)
x_half - 1.96*sqrt(x_half_var)
Cl <- V * k
A <- V^2 * k^2 * sig2hat * sum(x^2) + V^2 * sig2hat * n - 2*V^2*k*sig2hat*sum(x)
A2 <- n*sum(x^2) - sum(x)^2
Cl_var <- A/A2
Cl2 <- -beta1 * exp(log(D) - beta0)
B <- (beta1^2 * exp(log(D) - beta0)^2 * sum(x^2) + n * exp(log(D) - beta0)^2 +
2*beta1*exp(log(D) - beta0)^2 *sum(x)) * sig2hat
B2 <- n*sum(x^2) - sum(x)^2
Cl2_var <- B/B2
Cl - 1.96*sqrt(Cl_var)
sig2hat
y <- c(1.63,1.01,0.73,0.55,0.41,0.01,0.06,0.02)
x <- c(2,4,6,8,10,24,28,32)
mod <- lm(log(y) ~ x)
summary(mod)
k <- -as.numeric(mod$coefficients[2])
D <- 30
V <- exp(log(D) - as.numeric(mod$coefficients[1]))
n <- length(y)
sig2hat <- sum(mod$residuals^2)/(n-2)
sig2hat <- sum(mod$residuals^2)/n
sum((log(y) - log(D*exp(-k*x)/V))^2)/length(y)
exp(-(sum(log(y)) - n*log(D) + k*sum(x))/length(y))
# Part e
plot(fitted(mod), residuals(mod))
# part d
plot(x, log(y))
abline(coef=mod$coefficients)
plot(y, exp(fitted(mod)))
devtools::install_github("samuelanyaso/DyAEWMA", build_vignettes = T)
